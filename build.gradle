buildscript {
    ext.artifactId = 'quaklog-api'
    ext.archive_extension = 'jar'
    ext.archive_file_name = "${artifactId}.${archive_extension}"

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

group 'br.com.helpdev'
version '1.1.0'
description = "API para importação e consulta de arquivos de log do jogo Quake"

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'

    ext {
        versions = [
                junit   : "5.2.0",
                assertj : "3.11.1",
                spring  : "2.2.2.RELEASE",
                swagger : '2.9.2',
                inject  : '1',
                mockito : '1.10.19',
                lombok  : '1.18.10',
                caffeine: '2.8.0',
                jackson : '2.11.1'
        ]

        libs = [
                inject                      : [
                        "javax.inject:javax.inject:${versions.inject}"
                ],
                spring_test                 : [
                        "org.springframework.boot:spring-boot-starter-test:${versions.spring}",
                ],
                unit_test                   : [
                        "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                        "org.mockito:mockito-all:${versions.mockito}"

                ],
                spring_config               : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "io.springfox:springfox-swagger2:${versions.swagger}",
                ],
                cacheable                   : [
                        "org.springframework.boot:spring-boot-starter-cache:${versions.spring}",
                        "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}",
                        "com.github.ben-manes.caffeine:guava:${versions.caffeine}",
                        "com.github.ben-manes.caffeine:jcache:${versions.caffeine}",
                ],
                spring_annotation_processor : [
                        "org.springframework.boot:spring-boot-configuration-processor:${versions.spring}",
                ],
                communs_libs                : [
                        "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
                        "org.projectlombok:lombok:${versions.lombok}"
                ],
                communs_annotation_pŕocessor: [
                        "org.projectlombok:lombok:${versions.lombok}"
                ],
                entrypoint                  : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "io.springfox:springfox-swagger-ui:${versions.swagger}",
                ],
                database                    : [
                        "org.springframework.boot:spring-boot-starter-data-mongodb:${versions.spring}",
                ],
        ]
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            html.enabled = true // human readable
            xml.enabled = true // required by coveralls
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

wrapper {
    gradleVersion = '5.5.1'
}